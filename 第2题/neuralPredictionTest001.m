function [Y,Xf,Af] = neuralPredictionTest001(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-Nov-2022 19:57:46.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx10 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [28.0125;28.0125;28.0125;28.0125;28.0125;28.0125;28.0125;28.0125;28.0125;28.0125];
x1_step1.gain = [0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683;0.389715832205683];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5922143666484787072;1.2281744316874294576;1.6136771580246564994;-0.4179402500491225525;-0.32543311199552438229;-0.2895342108290266947;-0.62078363469471753433;-1.0402216112605169318;1.5684967790426371792;1.5010387108053853122];
IW1_1 = [0.31210796498315801495 0.13970584122515050662 -0.73289027428597308678 1.132946060007586242 -0.40732259758564259844 -0.82303694671643523595 -0.32347385670462841523 -0.042734035287005409098 0.56231991258799651767 -0.45284059013563709994;-0.49899917480508837464 0.19791424617060268676 0.3107898883948760349 -0.26891751200963143198 0.43203454345458652819 0.042155917895626865421 0.56912019066314589733 0.072457258648586042593 -0.18084030786981500349 -0.095171449481152192718;-0.25859009011023276203 -0.13669747123761616381 -0.14229865674597166891 -0.22736973765187123986 -0.18676773735787496888 -0.11312282979715161668 -0.1825214377146550937 -0.27394204518179987584 -0.18200070083414135458 -0.26989467714176246238;0.28900534384667214693 -0.38350813553103640929 0.035913451770049321932 0.48973838325299517971 0.57914113165993774679 0.68924631023619964409 -0.77888619125754288142 -0.5366149032031546362 -0.10435699571140073794 -1.1943455109059606389;0.0066018379489515919417 -0.28388085838762139312 -0.32363530305753668292 0.028105967054463172616 0.18143319641442617884 0.5160842577462906311 0.75412711487351147266 0.97019715983784604596 0.31154025587054567925 0.53761665583732998197;-0.83551072936958137305 -0.6669957228608057731 -0.69749986524754015171 0.15022648098708965558 0.10782095933436615376 -0.086205840961767102315 -0.3409449935068245563 0.31256376303086924606 0.11959069973074300253 0.58003933050831757434;-0.12742864832533074004 0.21456056116706281878 0.13698240067412234544 -0.33335992245421153246 -0.037681264207946534028 -0.31229152601922516297 0.47761804634792770496 -0.050345702398840085079 -0.3777971940029856146 -0.29804785431125657702;-0.3103408449232183397 -0.70011512033226275253 -0.86207237058574470723 -0.64680643149586403151 0.10255538800415693601 0.18459035772949342058 0.4028820334846874851 -0.63566082890003106076 -0.45974758757928152475 0.050319963943065898482;0.85227204297951164591 -0.66235988668430934023 -0.070786096402200709976 0.099350830054804592506 -0.097390265497632688696 0.75872987007119674363 0.511011046096880861 0.42466524669005628612 -0.70412285589147860509 0.081500961452666179086;0.46129605181396293734 0.55393930919227873932 0.41563298343525217904 -0.35694311583539484189 0.34817126231053274754 0.26649482003819902065 0.085228827325230016587 0.91402072326716998774 0.047022506993690836585 -0.80599735322672882987];

% Layer 2
b2 = -0.57995195307946967311;
LW2_1 = [0.29902590468161532877 0.82857025167186448833 -0.37782472505910852378 -0.097299162894230711851 0.084140808883020071218 -0.16113587197038123366 -0.52149246189983233801 -0.013075165524694004962 0.12131399735714454291 0.045058324501365064341];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.389715832205683;
y1_step1.xoffset = 28.0125;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
