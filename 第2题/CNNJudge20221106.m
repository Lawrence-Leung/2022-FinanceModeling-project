function [Y,Xf,Af] = CNNJudge20221106(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Nov-2022 19:57:59.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [11.2703357563171;30.1399999999994];
x1_step1.gain = [0.175058159013876;0.000211194014885296];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.4989540062893205175;3.2832183566039447875;-2.5147993588133870091;-1.4872656035406071062;-0.74058119999315652482;-0.57596426048317872493;-1.4954910588339924704;-2.1223387976968499657;2.9522107129746766319;-4.1046922017187243981];
IW1_1 = [3.6157013176300285551 2.4024632585367746707;-3.3566578321388291783 3.0552204319823501599;2.8912966679054972197 3.3282145762346235784;0.27525816302736028085 -4.4108985238687541397;4.36726095088711741 -0.65336165634369292032;-3.9141491984842184948 -2.1078112523543750534;-0.84987988400778557985 4.3316580516818223856;-4.5706331840530900479 -1.2265440227527566464;3.7445371541904015622 3.3101143212572501362;-3.8744248589769987312 -2.6632004946744340934];

% Layer 2
b2 = 0.010816380447024107406;
LW2_1 = [0.025300873274851701927 -0.0045365828189919375768 -0.016034532907860735151 -0.010644140743585314701 0.91532598062228498481 0.066352111232765201287 -0.0091759585716479179218 0.20038087962186892921 0.3534749974598593858 0.0062482476440339921112];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
